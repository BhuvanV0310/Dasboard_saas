// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and role-based access
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  role          Role      @default(CUSTOMER)
  branchId      String?
  
  // Stripe Integration
  stripeCustomerId String?   @unique
  activePlanId     String?
  activePlan       Plan?     @relation(fields: [activePlanId], references: [id], onDelete: SetNull)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  branches  Branch[]
  payments  Payment[]
  reviews   Review[]
  accounts  Account[]
  sessions  Session[]
  csvUploads CsvUpload[]
  
  @@index([email])
  @@index([stripeCustomerId])
  @@index([role])
  @@index([createdAt])
}

enum Role {
  ADMIN
  CUSTOMER
  DELIVERY_PARTNER
}

// NextAuth Account model (for OAuth providers)
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth Session model (for database sessions)
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// NextAuth Verification Token model (for email verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Subscription Plan model
model Plan {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String
  features    String[]
  status      PlanStatus @default(ACTIVE)
  
  // Stripe Integration
  stripePriceId String?  @unique
  stripeProductId String? @unique
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  
  @@index([status])
}

enum PlanStatus {
  ACTIVE
  INACTIVE
}

// Branch model
model Branch {
  id          String   @id @default(uuid())
  name        String
  location    String?
  address     String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  reviews     Review[]
  
  @@index([userId])
  @@index([createdAt])
}

// Payment model
model Payment {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId      String?
  amount      Float
  status      PaymentStatus @default(PENDING)
  
  // Stripe Integration
  stripePaymentIntentId String? @unique
  stripeSessionId       String? @unique
  
  planName    String?
  metadata    Json?
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([stripeSessionId])
  @@index([createdAt])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

// Review model for sentiment analysis
model Review {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId    String?
  branch      Branch?  @relation(fields: [branchId], references: [id], onDelete: SetNull)
  text        String   @db.Text
  rating      Int?
  sentiment   String?
  category    String?
  // AI Sentiment fields (new)
  sentimentScore   Float?
  sentimentLabel   SentimentLabel?
  feedbackCategory FeedbackCategory?
  aiConfidence     Float?
  analyzedAt       DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([branchId])
  @@index([sentiment])
  @@index([sentimentLabel])
  @@index([createdAt])
}

enum SentimentLabel {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum FeedbackCategory {
  PRODUCT
  SERVICE
  DELIVERY
  OTHER
}

// CSV Upload model for analytics
model CsvUpload {
  id           String   @id @default(uuid())
  filename     String
  filepath     String
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedAt   DateTime @default(now())
  summaryJson  Json?
  chartConfig  Json?
  status       BranchStatus @default(ACTIVE)
  @@index([uploadedById])
  @@index([uploadedAt])
}

enum BranchStatus {
  ACTIVE
  INACTIVE
}
